# These are functions which provide a uniform interface
# but need to swap behavior between Trilinos/standalone


MACRO(TRIBITS_FWD_PARSE_ARG  VAR_TO_SET_OUT  ARGNAME)
  IF (PARSE_${ARGNAME})
    SET(${VAR_TO_SET_OUT} ${${VAR_TO_SET_OUT}} ${ARGNAME} ${PARSE_${ARGNAME}})
  ENDIF()
ENDMACRO()

FUNCTION(EXE_LINK_LIBRARIES TEST_NAME)
SET(EXE_BINARY_NAME ${PACKAGE_NAME}_${TEST_NAME})
IF (TARGET ${EXE_BINARY_NAME})
IF(KOKKOS_HAS_TRILINOS)
TARGET_LINK_LIBRARIES(${EXE_BINARY_NAME} ${ARGN})
ELSE()
TARGET_LINK_LIBRARIES(${EXE_BINARY_NAME} PRIVATE ${ARGN})
ENDIF()
ENDIF()
ENDFUNCTION()

FUNCTION(EXE_INCLUDE_DIRECTORIES TEST_NAME)
SET(EXE_BINARY_NAME ${PACKAGE_NAME}_${TEST_NAME})
IF (TARGET ${EXE_BINARY_NAME})
TARGET_INCLUDE_DIRECTORIES(${EXE_BINARY_NAME} PRIVATE ${ARGN})
ENDIF()
ENDFUNCTION()

FUNCTION(TEST_LINK_LIBRARIES TEST_NAME)
SET(EXE_BINARY_NAME ${PACKAGE_NAME}_${TEST_NAME})
IF (TARGET ${EXE_BINARY_NAME})
IF(KOKKOS_HAS_TRILINOS)
TARGET_LINK_LIBRARIES(${EXE_BINARY_NAME} ${ARGN})
ELSE()
TARGET_LINK_LIBRARIES(${EXE_BINARY_NAME} PRIVATE ${ARGN})
ENDIF()
ENDIF()
ENDFUNCTION()

FUNCTION(TEST_INCLUDE_DIRECTORIES TEST_NAME)
SET(EXE_BINARY_NAME ${PACKAGE_NAME}_${TEST_NAME})
IF (TARGET ${EXE_BINARY_NAME})
TARGET_INCLUDE_DIRECTORIES(${EXE_BINARY_NAME} PRIVATE ${ARGN})
ENDIF()
ENDFUNCTION()

MACRO(KOKKOS_SET_TRIBITS_INCLUDES VAR_TO_SET)
IF(KOKKOS_HAS_TRILINOS)
#for trilinos, do a blanket inclues
INCLUDE_DIRECTORIES(${ARGN})
ENDIF()
SET(${VAR_TO_SET} ${ARGN})
ENDMACRO()

MACRO(KOKKKOS_APPEND_TRIBITS_INCLUDES VAR_TO_SET)
IF(KOKKOS_HAS_TRILINOS)
#for trilinos, do a blanket inclues
INCLUDE_DIRECTORIES(${ARGN})
ENDIF()
LIST(APPEND ${VAR_TO_SET} ${ARGN})
ENDMACRO()

MACRO(KOKKOS_SET_TRIBITS_INSTALL_INCLUDES VAR_TO_SET)
IF(KOKKOS_HAS_TRILINOS)
#for trilinos, do a blanket inclues
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${ARGN})
ENDIF()
SET(${VAR_TO_SET} ${ARGN})
ENDMACRO()

MACRO(KOKKOS_APPEND_TRIBITS_INSTALL_INCLUDES VAR_TO_SET)
IF(KOKKOS_HAS_TRILINOS)
#for trilinos, do a blanket inclues
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${ARGN})
ENDIF()
LIST(APPEND ${VAR_TO_SET} ${ARGN})
ENDMACRO()

FUNCTION(KOKKOS_TARGET_INCLUDES TARGET_NAME)
FOREACH(DIR ${ARGN})
TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC
  $<BUILD_INTERFACE:${DIR}>
)
ENDFOREACH()
ENDFUNCTION()

FUNCTION(KOKKOS_ADD_EXE TEST_NAME)
#Every test always includes the local directories
KOKKOS_SET_TRIBITS_INCLUDES(
 EXE_INCLUDES
 ${CMAKE_CURRENT_BINARY_DIR}
 ${CMAKE_CURRENT_SOURCE_DIR}
)
set(opts)
set(oneValArgs)
set(multiValArgs SOURCES)
cmake_parse_arguments(PARSE "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN})

TRIBITS_ADD_EXECUTABLE(
  ${TEST_NAME}
  SOURCES ${PARSE_SOURCES}
)
EXE_INCLUDE_DIRECTORIES(${TEST_NAME} ${PARSE_INCLUDES} ${EXE_INCLUDES})
EXE_LINK_LIBRARIES(${TEST_NAME} kokkoskernels)
ENDFUNCTION()

FUNCTION(KOKKOS_ADD_TEST TEST_NAME)
  set(opts FORCEBUILD BUILDONLY)
  set(oneValArgs)
  set(multiValArgs SOURCES CATEGORIES INCLUDES)
  cmake_parse_arguments(PARSE "${opts}" "${oneValArgs}" "${multiValArgs}" ${ARGN})

  #Every test always includes the local directories
  KOKKOS_SET_TRIBITS_INCLUDES(
   TEST_INCLUDES
   ${CMAKE_CURRENT_BINARY_DIR}
  )

  KOKKOS_APPEND_TRIBITS_INSTALL_INCLUDES(
   TEST_INCLUDES
   ${CMAKE_CURRENT_SOURCE_DIR}
  )

  SET(TEST_FWD_ARGS "")
  TRIBITS_FWD_PARSE_ARG(TEST_FWD_ARGS CATEGORIES)


  IF(PARSE_FORCEBUILD OR PARSE_BUILDONLY)
    TRIBITS_ADD_EXECUTABLE(
      ${TEST_NAME}
      COMM serial mpi
      SOURCES ${PARSE_SOURCES}
      TESTONLYLIBS kokkoskernels_test_common
    )
  ENDIF()

  IF(PARSE_FORCEBUILD AND NOT PARSE_BUILDONLY)
    TRIBITS_ADD_TEST(
      ${TEST_NAME}
      NAME ${TEST_NAME}
      COMM serial mpi
      NUM_MPI_PROCS 1
      FAIL_REGULAR_EXPRESSION "  FAILED  "
      ${CALL_ARGS}
    )
  ENDIF()

  IF(NOT PARSE_FORCEBUILD AND NOT PARSE_BUILDONLY)
    TRIBITS_ADD_EXECUTABLE_AND_TEST(
      ${TEST_NAME}
      SOURCES ${PARSE_SOURCES}
      COMM serial mpi
      NUM_MPI_PROCS 1
      FAIL_REGULAR_EXPRESSION "  FAILED  "
      TESTONLYLIBS kokkoskernels_test_common
      ${TEST_FWD_ARGS}
    )
  ENDIF()

  TEST_INCLUDE_DIRECTORIES(${TEST_NAME} ${PARSE_INCLUDES} ${TEST_INCLUDES})
  TEST_LINK_LIBRARIES(${TEST_NAME} kokkos_gtest)
  TEST_LINK_LIBRARIES(${TEST_NAME} kokkoskernels)

ENDFUNCTION()


